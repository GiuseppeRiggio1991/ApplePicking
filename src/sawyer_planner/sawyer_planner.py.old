#!/usr/bin/env python

import time
import enum
import openravepy
import numpy
import prpy
import sys
from openravepy.misc import InitOpenRAVELogging
from prpy.planning.cbirrt import CBiRRTPlanner
from copy import *

import rospy
from intera_core_msgs.msg import EndpointState, JointLimits
from geometry_msgs.msg import Point
from std_msgs.msg import Bool
from std_srvs.srv import SetBool

import intera_interface

import pyquaternion


class SawyerPlanner:

    def __init__(self):

        self.environment_setup()
        self.STATE = enum.Enum('STATE', 'TO_START TO_GOAL GRAB TO_PLACE DROP')

        self.goal = [None]

        rospy.Subscriber("/robot/limb/right/endpoint_state", EndpointState, self.get_robot_ee_position, queue_size = 1)
        rospy.Subscriber("/sawyer_planner/goal", Point, self.get_goal, queue_size = 1)
        rospy.Subscriber("/robot/joint_limits", JointLimits, self.get_joint_limits, queue_size = 1)
        self.enable_bridge_pub = rospy.Publisher("/sawyer_planner/enable_bridge", Bool, queue_size = 1)

        self.gripper_client = rospy.ServiceProxy('/gripper_action', SetBool)

        time.sleep(0.5)
        
        self.enable_bridge_pub.publish(Bool(True))

        self.arm = intera_interface.Limb("right")

        # trasform from the real sawyer EE to openrave camera frame 
        self.T_EE2C = numpy.array([
                    [1.0, 0.0, 0.0, 0.0026],
                    [0.0, 1.0, 0.0, 0.0525],
                    [0.0, 0.0, 1.0, -0.0899],
                    [0.0, 0.0, 0.0, 1.0]
                    ])

        # transformation from the new camera frame (mounted on the gripper) and the EE
        self.T_G2EE = numpy.array([
                    [0.0, -1.0, 0.0, 0.1],
                    [1.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 1.0, 0.11],
                    [0.0, 0.0, 0.0, 1.0]
                    ])

        self.K_V = 0.15
        self.K_VQ = 2.1
        self.CONFIG_UP = numpy.array([0.0, 0.0, 0.0, 0.0, 0.0, -numpy.pi/2, 0.0])        


        while (self.goal[0] == None):
            pass

        self.enable_bridge_pub.publish(Bool(False))

        self.get_start()

        print "qstart: ", self.qstart

        self.state = self.STATE.TO_START

    def environment_setup(self):

        self.env = openravepy.Environment()
        InitOpenRAVELogging()
        module = openravepy.RaveCreateModule(self.env, 'urdf')
        with self.env:
            name = module.SendCommand('load /home/peppe/python_test/sawyer.urdf /home/peppe/python_test/sawyer_base.srdf')
            self.robot = self.env.GetRobot(name)

        time.sleep(0.5)

        self.ikmodel = openravepy.databases.inversekinematics.InverseKinematicsModel(self.robot,iktype=openravepy.IkParameterization.Type.Transform6D)
        if not self.ikmodel.load():
            self.ikmodel.autogenerate()


        manip = self.robot.GetActiveManipulator()
        self.robot.SetActiveDOFs(manip.GetArmIndices())


    def get_robot_ee_position(self, msg):

        self.ee_orientation = pyquaternion.Quaternion(msg.pose.orientation.w, msg.pose.orientation.x, msg.pose.orientation.y, msg.pose.orientation.z)
        self.ee_position = numpy.array([msg.pose.position.x, msg.pose.position.y, msg.pose.position.z])

    def get_joint_limits(self, msg):
        
        lower = numpy.array(msg.position_lower)
        upper = numpy.array(msg.position_upper)

        self.robot.SetDOFLimits(lower[:7], upper[:7], self.robot.GetActiveManipulator().GetArmIndices())

    def get_start(self):

        # Initial pose of the EE

        self.Tstart = numpy.array([
                        [0.2405983, -0.1981394,  0.9501859, 0.162],
                        [0.0187743, -0.9778094, -0.2086535, 0.4912],
                        [0.9704432,  0.0680408, -0.2315394, 0.5758],
                        [0.0, 0.0, 0.0, 1.0]
                        ])

        qstart_param_name = rospy.search_param('qstart')

        if qstart_param_name == None:
            rospy.logwarn('Check for optimum configuation!')
            self.maxLCIPlanner()
        else:
            self.qstart = numpy.array(rospy.get_param(qstart_param_name))

    def maxLCIPlanner(self, offset = 0.13):

        # convert from EE to Camera frame

        camera_Tstart = numpy.dot ( self.Tstart, numpy.linalg.inv(self.T_EE2C) )

        Q = self.robot.GetActiveManipulator().FindIKSolutions(camera_Tstart, openravepy.IkFilterOptions.CheckEnvCollisions)
    
        maxLCI_mean = 0
        qstart = numpy.zeros((1, 7))
    
        cbirrt = CBiRRTPlanner()

        # same direction (no relative orientation between EE and camera frame)

        direction = self.normalize( numpy.array( (self.goal - self.Tstart[:3, 3])))

        min_distance = numpy.linalg.norm(self.goal - self.Tstart[:3, 3]) - offset
        max_distance = numpy.linalg.norm(self.goal - self.Tstart[:3, 3]) - offset
    
        if min_distance < 0:
            direction = -direction
            min_distance = - min_distance
            max_distance = - max_distance
    
        validpath = 0
        total = len(Q)
        index = 0

        for q in Q:
            index += 1
            with self.robot:
                rospy.loginfo("%d / %d", index, len(Q))
                self.robot.SetDOFValues(q, self.robot.GetActiveManipulator().GetArmIndices())
                try:
                    path = cbirrt.PlanToEndEffectorOffset(self.robot, direction, numpy.array(min_distance, max_distance), timelimit = 0.3)
                except Exception as ex:
                    continue
    
            validpath += 1
            LCI = 0.0
            LCI_mean = 0.0
    
            for i in range(0, path.GetNumWaypoints()):
                with self.robot:
                    if i != 0:
                        if (numpy.linalg.norm(path.GetWaypoint(i) - path.GetWaypoint(i-1)) > 0.1): # very high negative reward for high change in joints value
                            LCI -= 10
    
                        self.robot.SetDOFValues(path.GetWaypoint(i), self.robot.GetActiveManipulator().GetArmIndices())
                        LCI += self.computeLCI()
    
            LCI_mean = LCI / path.GetNumWaypoints()
    
            if LCI_mean > maxLCI_mean:
                maxLCI_mean = LCI_mean
                qstart = q

        print "number of valid paths: ", validpath, "/", total

        if validpath == 0:
            rospy.logerr("No valid paths found!!")
            sys.exit()

        self.qstart = qstart[::-1]

    def computeLCI(self):

        J_t = self.robot.GetActiveManipulator().CalculateJacobian()

        u, s, v = numpy.linalg.svd(J_t, full_matrices = False)
        assert numpy.allclose(J_t, numpy.dot(u, numpy.dot(numpy.diag(s), v) ))

        return min(s) / max(s)


    def set_initial_goal(self):

        if (self.goal[0] == None):
            self.goal = numpy.array([0.9703, 0.3922, 0.1964])


    def get_goal(self, msg, offset = 0.13):

        self.goal = numpy.array([msg.x, msg.y, msg.z])

        self.goal_off = self.goal - offset * self.normalize(self.goal - self.ee_position)

    def go_to_start(self):
        
        joints = self.arm.joint_angles()

        if ( numpy.linalg.norm(joints.values() - self.qstart ) < 4.0 ):
            cmd = dict(zip(joints.keys(), self.qstart))
            self.arm.move_to_joint_positions(cmd)
        else:
            # if too far, go up first
            rospy.logwarn("The starting position is too far, I'm going up first!")
            
            cmd = dict(zip(joints.keys(), self.CONFIG_UP))
            self.arm.move_to_joint_positions(cmd)
            
            time.sleep(1)
            
            cmd = dict(zip(joints.keys(), self.qstart))
            self.arm.move_to_joint_positions(cmd)
                           
        
    def go_to_goal(self, goal = [None], to_goal = [None], offset = 0.13):

        if goal[0] == None:
            goal_off = self.goal_off
            goal = self.goal
        else:
            if to_goal[0] == None:
                goal_off = goal - offset * self.normalize(goal - self.ee_position)
            else:
                goal_off = goal - offset * self.normalize(to_goal)

        while numpy.linalg.norm(goal_off - self.ee_position) > 0.005:

            des_vel_t = self.K_V * (goal_off - self.ee_position)

            if to_goal[0] != None:
                des_omega = - self.K_VQ * self.get_angular_velocity([None], to_goal)
            else:
                des_omega = - self.K_VQ * self.get_angular_velocity(goal)

            des_vel = numpy.append(des_vel_t, des_omega)

            #print "goal: ", self.goal, " off: ", self.goal_off
            #print "des_vel: ", des_vel

            joint_vel = self.compute_joint_vel(des_vel)

            cmd = self.arm.joint_velocities()
            cmd = dict(zip(cmd.keys(), joint_vel[::-1]))

            self.arm.set_joint_velocities(cmd)

    def get_angular_velocity(self, goal = [None], to_goal = [None]):
        
        # rotation between the vector pointing to the goal and the z-axis
        if goal[0] == None:
            goal == self.goal

        z = numpy.dot( self.ee_orientation.rotation_matrix, numpy.array([0.0, 0.0, 1.0]) )

        if to_goal[0] == None:
            to_goal = goal - self.ee_position

        # normalize vectors
        z = self.normalize(z)
        to_goal = self.normalize(to_goal)

        axis = numpy.cross(to_goal, z)
        angle = numpy.arccos(numpy.dot(to_goal, z))

        if (angle < numpy.pi/2.0):
            return angle * axis
        else:
            rospy.logwarn("The orientation error is too big!")
            return 0.0 * axis

    def normalize(self, v):
        
        norm = numpy.linalg.norm(v)
        if norm == 0:
            return v
        return v / norm


    def compute_joint_vel(self, des_vel):

        joints = self.arm.joint_angles()
        joints = joints.values()

        with self.robot:
            self.robot.SetDOFValues(joints[::-1], self.robot.GetActiveManipulator().GetArmIndices())
            J_t = self.robot.GetActiveManipulator().CalculateJacobian()
            J_r = self.robot.GetActiveManipulator().CalculateAngularVelocityJacobian()
            J = numpy.concatenate((J_t, J_r), axis = 0)

        return numpy.dot( numpy.linalg.pinv(J), des_vel)

    def update(self):
        
        if self.state == self.STATE.TO_START:

            self.go_to_start()
            self.enable_bridge_pub.publish(Bool(True)) 

            self.state = self.STATE.TO_GOAL

        elif self.state == self.STATE.TO_GOAL:

            start = time.time()

            while (self.goal[0] == None) and (time.time() - start < 20.0) :
                pass

            self.K_VQ = 2.1

            if self.goal[0] != None:
                self.go_to_goal()
                self.state = self.STATE.GRAB
            else:
                rospy.logerr("There are no apples to pick!")
                sys.exit()

        elif self.state == self.STATE.GRAB:

            self.grab()

            #self.enable_bridge_pub.publish(Bool(False))

            self.state = self.STATE.TO_PLACE

        elif self.state == self.STATE.TO_PLACE:

            self.K_VQ = 0.5

            self.go_to_place()

            self.state = self.STATE.DROP

        elif self.state == self.STATE.DROP:

            self.drop()

            self.state = self.STATE.TO_START

        else:
            pass

    def grab(self):

        resp = self.gripper_client.call(False)

        while not resp.success:
            resp = self.gripper_client.call(False)

        self.go_up_and_back() 

    def go_up_and_back(self):

        # first go up

        goal = deepcopy(self.goal)
        goal[2] += 0.10

        to_goal = numpy.dot( self.ee_orientation.rotation_matrix, numpy.array([0.0, 0.0, 1.0]) )

        self.go_to_goal(goal, to_goal)

        # then go back
        goal[0] -= 0.25
        self.go_to_goal(goal, to_goal)

    def drop(self):

        self.goal = [None]

        resp = self.gripper_client.call(True)

        while not resp.success:
            resp = self.gripper_client.call(True)

    def go_to_place(self):

        goal = numpy.array([0.5, -0.5, 0.5])

        self.go_to_goal(goal)

    def clean(self):

        # on shutdown

        qstart_param_name = rospy.search_param('qstart')

        if qstart_param_name != None:
            rospy.delete_param(qstart_param_name)
